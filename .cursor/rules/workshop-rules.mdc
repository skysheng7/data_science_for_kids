---
alwaysApply: true
---
# Workshop Rules - Data Science for Kids

## Workshop Overview
This workshop runs for 5-day, 3-hour per day. The coding language is based on R.

## 1. Daily Structure (Follow Day 1 Pattern)

### 1.1 Folder Organization
Each day folder must contain:
- `README.md` - Main lesson content with activities
- `activities/` - Individual spell files (`dayXX_spellYY_name.R`)
- `solutions/` - Single solutions file including solutions to all spells in different R scripts in activities (`dayXX_spell_solutions.md`)
- `datasets/` - Data files (Days 2-5 only, not Day 1)

### 1.2 README.md Structure & Numbering
Use hierarchical numbering throughout:
1. Title with magical theme
2. Learning objectives with üéØ
3. Ice breaker activity (10 min) with time estimation
4. Main activities with spells (numbered sections)
   4.1 Section 1 (*Duration: X minutes*)
   4.2 Section 2 (*Duration: X minutes*)
   4.3 Section 3 (*Duration: X minutes*)
5. Pro Tips Cheatsheet (end of file)
6. Troubleshooting Cheatsheet (end of file)

### 1.3 Time Estimation Requirements
- Add time estimation at the beginning of each major section
- Format: *Duration: X minutes*
- Include total time for ice breaker (10 min)
- Estimate realistic time for each main chapter/section

### 1.4 GIF Integration
- Include relevant GIFs throughout the content
- Use placeholder format: `<img src="PLACEHOLDER_GIF_URL" alt="description" style="width: 100%; height: auto;">`
- Ask user to replace with actual GIF HTML later
- Place GIFs strategically to enhance learning and engagement

## 2. Spell Activities Format

### 2.1 Spell Numbering & Structure
- in README.md file: **Number each spell:** `### Spell 1: Descriptive Name`, `### Spell 2: Another Name`
- in README.md file: **Always follow with activity:** `#### üéà Activity: Activity Name`
- If there is a spell in README.md file, always create a corresponding R script with file name: `dayXX_spellYY_descriptive_name.R`
- In R script: Start with magical header: `# üîÆ Day X - Spell Y: [Name]`
- In R script: Include question code chunk
- Add activity instructions with üéà
- Include challenges with ‚ú®
- End with memory tip üí°

### 2.2 Posit Cloud File References
In README files, always instruct users:
- "üìÅ **Find this spell in Posit Cloud:** Look for the file `exact_filename.R` in your project files!"
- List the exact R script name for each spell
- Make it easy for students to locate files

### 2.3 Code Scaffolding Strategy
- **Days 2-5:** Have students write more code themselves
- Use placeholders like `...` where they fill in code
- **Beginner sections:** Provide complete working examples
- **Intermediate sections:** Provide structure with gaps to fill
- **Challenging & advanced sections:** Students write entire blocks or multiple lines

## 3. Solutions & Answer Keys

### 3.1 Solution File Format
- Single .md file per day: `dayXX_spell_solutions.md`
- Include solutions to all spells and their questions
- When students need to write new code, print out the **entire code chunk** in solution
- **Always include expected output:** Write exactly what the output would be

### 3.2 Expected Output Format

```R
# Code example
print("Hello World")
```

Expected Output:
```R
[1] "Hello World"
```

## 4. Activity Planning Guide
- **Learning through play**: Use toys, games, and creative projects to make abstract concepts concrete
- **Peer collaboration**: Encourage pair programming and team challenges
- **Incremental complexity**: Build from simple concepts to more advanced topics gradually
- **Visual and kinesthetic learning**: Combine physical activities, beautiful visuals with digital programming
- Use props: stuffed animals (e.g., cows), candy, toys
- Create physical representations of abstract concepts
- Include movement and hands-on manipulation

## 5. Writing Style Guidelines

### 5.1 Language & Tone
- Simple language for ages 10-14
- Encouraging, inclusive tone
- Don't assume all kids have laptops/phones
- Minimal bolding - only for important points
- DO NOT over-write too much text, be straightforward and cut to the point
- Include emoji and visual cues
- Use storytelling to explain abstract concepts
- Provide analogies using familiar concepts (toys, animals, magic)
- Frame complex concepts as magical or game-like scenarios
- Use Oda the Data Otter theme throughout: Oda is a data science wizard, a friendly hacker with magical data powers

### 5.2 Use Emojis in README Files and Code
- üéØ Learning objective
- üéà Activity instruction (ALWAYS use for activities)
- üí° Pro tip
- üêõ Common mistake
- ‚ú® Challenge/extension
- üéâ Celebration
- ü§° Fun fact
- ‚úÖ Correct way
- ‚ùå Wrong way

## 6. Required End Sections

### 6.1 Pro Tips Cheatsheet
**ALWAYS include at end of each day's README:**
- Section title: `## X. üìã Pro Tips Cheatsheet`
- Summarize key knowledge and tips learned that day
- Organize by topic/concept
- Use bullet points and clear formatting
- Include practical coding tips and best practices

### 6.2 Troubleshooting Cheatsheet  
**ALWAYS include at end of each day's README:**
- Section title: `## X+1. üÜò Troubleshooting Cheatsheet`
- List common mistakes students make
- Provide clear solutions for each problem
- Include "What it means," "Why it happens," and "The Fix" format
- Focus on errors specific to that day's content

## 7. Technical Notes
- Use snake_case for all files and folder names
- R scripts use .R extension
- Solutions in single .md file per day
- Keep `requirements.txt` updated for any Python packages
- Always use hierarchical numbering (1, 1.1, 1.2, 2, 2.1, etc.)
- Include time estimations for all major sections
- Reference exact filenames when directing students to Posit Cloud files
