---
alwaysApply: true
---
# Workshop Rules - Data Science for Kids

## Workshop Overview
This workshop runs for 5-day, 3-hour per day. The coding language is based on R.

## 1. Daily Structure (Follow Day 1 Pattern)

### 1.1 Folder Organization
Each day folder must contain:
- `README.md` - Main lesson content with activities
- `activities/` - Individual spell files (`dayXX_spellYY_name.R`)
- `solutions/` - Single solutions file including solutions to all spells in different R scripts in activities (`dayXX_spell_solutions.md`)
- `datasets/` - Data files (Days 3-5 only)

### 1.2 README.md Structure & Numbering
Use hierarchical numbering throughout:
1. Title with magical theme (Don't change title, I already wrote it down for each README file for each day)
2. Image in .png format (Don't change this, I've already included one)
3. Learning objectives with üéØ. Each bullet point under learning objectives should start with an emoji
4. Ice breaker activity (10 min) with time estimation
5. Main activities with spells (numbered sections)
   4.1 Section 1 (*Duration: X minutes*)
   4.2 Section 2 (*Duration: X minutes*)
   4.3 Section 3 (*Duration: X minutes*)
6. Pro Tips Cheatsheet (end of file)
7. Troubleshooting Cheatsheet (end of file)

### 1.3 Time Estimation Requirements
- Add time estimation at the beginning of each major section
- Add time estimation at the beginning of each subsection (2.1, 2.2, etc.)
- Format: *Duration: X minutes*
- Include total time for ice breaker (10 min)
- Estimate realistic time for each main chapter/section and subsections

### 1.4 GIF Integration
- Include relevant GIFs throughout the content
- Use placeholder format: `<img src="PLACEHOLDER_GIF_URL" alt="description" style="width: 100%; height: auto;">`
- Ask user to replace with actual GIF HTML later
- Place GIFs strategically to enhance learning and engagement
- Always retain GIFs when reorganizing or editing content.

## 2. Spell Activities Format

### 2.1 Spell Numbering & Structure
- Always use emojis to make things fun and in the theme of magical otter who is a data wizard
- in README.md file: **Number each spell:** `### Spell 1: Descriptive Name`, `### Spell 2: Another Name`
- in README.md file: **Always follow with activity:** `#### üéà Activity: Activity Name`
- If there is a spell in README.md file, always create a corresponding R script with file name: `dayXX_spellYY_descriptive_name.R`
- In R script: Start with magical header: `# üîÆ Day X - Spell Y: [Name]`
- In R script: Include question code chunk
- Add activity instructions with üéà
- Include challenges with ‚ú®
- End with memory tip üí°
- If the concept involves demonstration with code, you should present small code snippets for demonstration first, followed by simple explanations for each new concept/function before asking them to go to Posit Cloud and play with the code themselves

### 2.2 Posit Cloud File References
In README files, always instruct users:
- "üìÅ **Find this spell in Posit Cloud:** Look for the file `exact_filename.R` in your project files!"
- List the exact R script name for each spell
- Make it easy for students to locate files

### 2.3 Code style
- Days 2-5: Students write more code themselves
- Introduce ONE new concept at a time
- DO NOT print the take home message or tips, Tips should be written down as comments
- Use minimal packages and functions to avoid overload
- Use "########################################################" to seperate each code chunk (different questions/challenges)
- When introducing any new function, package, or concept, provide clear explanations in simple language
   - Include explanatory comments directly as comments in the code scripts
   - Add the same explanations to the Pro Tips section of the README file in the appropriate section
- Use `...` placeholders for student fill-ins
- Code structure: Example first, then practice questions
- Difficulty levels:
   - Beginner: Code structure with gaps
   - Intermediate: Code structure with 1 or a few lines for them to write
   - Advanced: Students write entire blocks

### 2.4 Age-Appropriate Complexity Guidelines (CRITICAL)
**Target Age: 10-14 years old - Keep concepts VERY simple!**

#### Day-by-Day Complexity Limits:
- **Day 1:** Variables, basic data types, simple if-else only
- **Day 2:** For loops, packages, basic ggplot2 with simple vectors, simple dataframes only
- **Day 3:** Data loading, basic dplyr functions, pipelines, intermediate visualizations
- **Day 4:** Statistics concepts with hands-on activities
- **Day 5:** Basic ML concepts and AI ethics discussions


#### What to AVOID:
- Complex nested operations
- Multiple new packages in one spell
- Advanced statistical concepts without hands-on activities
- More than 3 new R functions per spell
- Long code blocks without comments
- Abstract concepts without physical analogies

## 3. Solutions & Answer Keys

### 3.1 Solution File Format
- Single .md file per day: `dayXX_spell_solutions.md`
- Include solutions to all spells and their questions
- When students need to write new code, print out the **entire code chunk** in solution
- **Always include expected output:** Write exactly what the output would be
- You DO NOT need summarize the key concepts at the end of the solution file

### 3.2 Expected Output Format

```R
# Code example
print("Hello World")
```

Expected Output:
```R
[1] "Hello World"
```

## 4. Activity Planning Guide
- **Learning through play**: Use toys, games, and creative projects to make abstract concepts concrete
- **Peer collaboration**: Encourage pair programming and team challenges
- **Incremental complexity**: Build from simple concepts to more advanced topics gradually
- **Visual and kinesthetic learning**: Combine physical activities, beautiful visuals with digital programming
- Use props: stuffed animals (e.g., cows), candy, toys
- Create physical representations of abstract concepts
- Include movement and hands-on manipulation
- Rotate physical games with coding activities

## 5. Writing Style Guidelines

### 5.1 Language & Tone
- Simple language for ages 10-14
- Encouraging, inclusive tone
- Don't assume all kids have laptops/phones
- Minimal bolding - only for important points
- DO NOT over-write too much text, be straightforward and cut to the point
- Include emoji and visual cues
- Use storytelling to explain abstract concepts
- Provide analogies using familiar concepts (toys, animals, magic)
- Frame complex concepts as magical or game-like scenarios
- Use Oda the Data Otter theme throughout: Oda is a data science wizard, a friendly hacker with magical data powers

### 5.2 Explanation Structure for New Concepts (MANDATORY)
**Every time you introduce something new, follow this pattern:**

1. **Start with "What is X?"** - Give the simplest possible definition
2. **Use a relatable analogy** - Compare to something kids know (toys, apps, games)
3. **Show simple example** - Demonstrate with very basic code
4. **Explain what happens** - Tell them exactly what the output will be
5. **Add comments in code** - Explain every line that's new
6. **Summarize with emoji** - End with a üí° key learning point

**Example Pattern:**
```R
# üí° What is a Package?
# Think of packages like apps on your phone - each one adds new powers to R!

# Step 1: Install the package (like downloading an app)
install.packages("ggplot2")

# Step 2: Load the package (like opening the app)
library(ggplot2)

# üí° Key Learning: 
# - Packages are like apps that add new powers to R
# - install.packages() downloads them once
# - library() opens them each time you want to use them
```

### 5.3 Use Emojis in README Files and Code
- üéØ Learning objective
- üéà Activity instruction (ALWAYS use for activities)
- üí° Pro tip
- üêõ Common mistake
- ‚ú® Challenge/extension
- üéâ Celebration
- ü§° Fun fact
- ‚úÖ Correct way
- ‚ùå Wrong way

## 6. Required End Sections

### 6.1 Pro Tips Cheatsheet
**ALWAYS include at end of each day's README:**
- Section title: `## X. üìã Pro Tips Cheatsheet`
- Summarize key knowledge and tips learned that day
- Organize by topic/concept
- Use bullet points and clear formatting
- Include practical coding tips and best practices

### 6.2 Troubleshooting Cheatsheet  
**ALWAYS include at end of each day's README:**
- Section title: `## X+1. üÜò Troubleshooting Cheatsheet`
- List common mistakes students make
- Provide clear solutions for each problem
- Include "What it means," "Why it happens," and "The Fix" format
- Focus on errors specific to that day's content

## 7. Technical Notes
- Use snake_case for all files and folder names
- R scripts use .R extension
- Solutions in single .md file per day
- Keep `requirements.txt` updated for any Python packages
- Always use hierarchical numbering (1, 1.1, 1.2, 2, 2.1, etc.)
- Include time estimations for all major sections
- Reference exact filenames when directing students to Posit Cloud files
